[{"C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\index.js":"1","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\App.js":"2","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\routes.js":"3","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\pages\\Login\\index.jsx":"4","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\pages\\Admin\\index.jsx":"5","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\LoginBox\\index.jsx":"6","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\Button\\index.jsx":"7","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\InputMedium\\index.jsx":"8","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\Header\\index.jsx":"9","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\LeftMenu\\index.jsx":"10","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\Main\\index.jsx":"11","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\Action\\index.jsx":"12","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\User\\index.jsx":"13","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\pages\\MedicalCenter\\index.jsx":"14","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\Exam\\index.jsx":"15","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\services\\mask\\index.js":"16","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\MedicalRecord\\index.jsx":"17","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\MedicalRecord\\Record\\index.jsx":"18"},{"size":198,"mtime":1610636360298,"results":"19","hashOfConfig":"20"},{"size":159,"mtime":1610644266886,"results":"21","hashOfConfig":"20"},{"size":489,"mtime":1610742270858,"results":"22","hashOfConfig":"20"},{"size":304,"mtime":1612400212000,"results":"23","hashOfConfig":"20"},{"size":604,"mtime":1612399704173,"results":"24","hashOfConfig":"20"},{"size":3144,"mtime":1612639868547,"results":"25","hashOfConfig":"20"},{"size":301,"mtime":1610738681178,"results":"26","hashOfConfig":"20"},{"size":297,"mtime":1610647047728,"results":"27","hashOfConfig":"20"},{"size":835,"mtime":1612399704202,"results":"28","hashOfConfig":"20"},{"size":718,"mtime":1611265712310,"results":"29","hashOfConfig":"20"},{"size":4610,"mtime":1612645477666,"results":"30","hashOfConfig":"20"},{"size":972,"mtime":1611011546904,"results":"31","hashOfConfig":"20"},{"size":10998,"mtime":1612396905603,"results":"32","hashOfConfig":"20"},{"size":587,"mtime":1612399704173,"results":"33","hashOfConfig":"20"},{"size":5854,"mtime":1612651383396,"results":"34","hashOfConfig":"20"},{"size":1355,"mtime":1611010297790,"results":"35","hashOfConfig":"20"},{"size":753,"mtime":1612707953838,"results":"36","hashOfConfig":"20"},{"size":3823,"mtime":1612655850068,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1hxvgs2",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"40"},"C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\index.js",[],["81","82"],"C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\App.js",[],"C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\routes.js",[],"C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\pages\\Login\\index.jsx",[],"C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\pages\\Admin\\index.jsx",[],"C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\LoginBox\\index.jsx",["83","84","85"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./styles.css\";\r\n\r\n\r\nimport axios from 'axios';\r\n\r\nimport Input from \"../InputMedium\";\r\nimport Button from \"../Button\";\r\n\r\nconst LoginBox = () => {\r\n  \r\n  let history = useHistory();\r\n  const [user, setUser] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [logged, setLogged] = useState(false);\r\n  const [accessProfile, setAccessProfile] = useState(\"\");\r\n  const [openError, setOpenError] = useState(false);\r\n  \r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    const response = await axios.post('http://localhost:3010/user/login',{\r\n      email: user,\r\n      password: password\r\n    });\r\n\r\n    if(response.status === 200) {\r\n      setAccessProfile(response.data.accessProfile);\r\n      setLogged(true);\r\n    } else if(response.status === 401){\r\n      openErrorDialog();\r\n    }\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(logged && accessProfile === 'Central de Cadastro') {\r\n      history.push('/admin');\r\n    } else if(logged && accessProfile === 'Médico') {\r\n      history.push('/medicalcenter');\r\n    } \r\n  }, [logged])\r\n\r\n  \r\n  const openErrorDialog = () => {\r\n    setOpenError(true);\r\n  }\r\n\r\n  const closeErrorDialog = () => {\r\n      setOpenError(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <Dialog\r\n            open={openError}\r\n            onClose={closeErrorDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">{\"Usuário e/ou senha inválidos\"}</DialogTitle>\r\n            {/* <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\">\r\n                    Percebemos que já existe um usuário cadastrado com esse CPF no sistema! Selecione a opção de editar usuário, se deseja alterar algum dado deste CPF.\r\n                </DialogContentText>\r\n            </DialogContent> */}\r\n            <DialogActions>\r\n            <Button onSubmit={closeErrorDialog} text={\"Fechar\"} color={'#FD9797'}/>\r\n            </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n      <form onSubmit={handleSubmit}>\r\n        <div id=\"login-box\">\r\n          <div>\r\n            <h3 className=\"header-text\">Login</h3>\r\n          </div>\r\n          <div id=\"input-box\">\r\n            <Input\r\n              title={\"Email\"}\r\n              type={\"text\"}\r\n              onChange={(e) => setUser(e.target.value)}\r\n            ></Input>\r\n            <Input\r\n              title={\"Senha\"}\r\n              type={\"password\"}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            ></Input>\r\n            <Button text={\"Entrar\"}></Button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginBox;\r\n","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\Button\\index.jsx",[],"C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\InputMedium\\index.jsx",[],"C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\Header\\index.jsx",[],"C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\LeftMenu\\index.jsx",[],"C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\Main\\index.jsx",["86"],"import React, { useState } from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport \"./styles.css\";\r\n\r\nimport axios from 'axios';\r\n\r\nimport Action from '../../components/Action';\r\nimport User from '../../components/User';\r\nimport Exam from '../../components/Exam';\r\nimport MedicalRecord from '../../components/MedicalRecord';\r\n\r\nconst Main = ({ page }) => {\r\n  const [includeUser, setincludeUser] = useState(false);\r\n  const [includeExam, setincludeExam] = useState(false);\r\n  const [searchMedicalRecord, setsearchMedicalRecord] = useState(false);\r\n  const [actionToTake, setActionToTake] = useState();\r\n  const [open, setOpen] = useState(false);\r\n  const [prontuary, setProntuary] = useState();\r\n  const [pacientName, setPacientName] = useState();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    // console.log(document.getElementById('prontuario').value);\r\n    // if(actionToTake === 'searchMedicalRecord') {\r\n    //   setsearchMedicalRecord(true);\r\n    // } else if(actionToTake === 'requestExam') {\r\n    //   setincludeExam(true);\r\n    // }\r\n  };\r\n\r\n  const handleForward = async () => {\r\n    let prontNumber = document.getElementById('prontuario').value;\r\n    setProntuary(prontNumber);// console.log(document.getElementById('prontuario').value);\r\n    const response = await axios.get(`http://localhost:3010/user/checkProntuary/${prontNumber}`);\r\n    if(response.data && response.data.name) setPacientName(response.data.name);\r\n    if(!response) return\r\n    if(actionToTake === 'searchMedicalRecord') {\r\n      setsearchMedicalRecord(true);\r\n    } else if(actionToTake === 'requestExam') {\r\n      setincludeExam(true);\r\n    }\r\n    setOpen(false);\r\n  }\r\n\r\n  let render;\r\n\r\n  switch (page) {\r\n    case 'admin':\r\n      render = !includeUser ? \r\n              <>\r\n                <Action title={'Incluir usuário'} type={'sum'} action={() => { setincludeUser(true)}}/>\r\n                <Action title={'Editar usuário'} type={'edit'} action={() => {}}/>\r\n                <Action title={'Excluir usuário'} type={'minus'}/>\r\n              </> : <User /> \r\n      break;\r\n    case 'medicalcenter': {\r\n      if (includeExam) {\r\n        render = <Exam prontuary={prontuary}/>\r\n      } else if(searchMedicalRecord) {\r\n        render = <MedicalRecord prontuaryNumber={prontuary} pacientName={pacientName}/>\r\n      } else {\r\n        render = <>\r\n                    <Action title={'Pesquisar prontuário'} type={'search'} action={() => { \r\n                      handleClickOpen()\r\n                      setActionToTake('searchMedicalRecord')\r\n                      }}/>\r\n                    <Action title={'Solicitar exame'} type={'sum'} action={() => { \r\n                      handleClickOpen()\r\n                      setActionToTake('requestExam') }}/>\r\n                    <Action title={'Solicitar procedimento'} type={'sum'}/>\r\n                    <Action title={'Adicionar evolução'} type={'sum'}/>\r\n                </>\r\n      }\r\n    break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" PaperProps={{style: {\r\n            backgroundColor: '#5383FF'\r\n          }}}>\r\n          <DialogTitle id=\"form-dialog-title\" style={{ color: 'white'}}>Digite o prontuário</DialogTitle>\r\n          <DialogContent >\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              id=\"prontuario\"\r\n              label=\"Número do prontuário\"\r\n              type=\"text\"\r\n              fullWidth\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\" style={{ color: 'white'}}>\r\n              Fechar\r\n            </Button>\r\n            <Button onClick={handleForward} color=\"primary\" style={{ color: 'white'}}>\r\n              Ok\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n\r\n      <div className=\"main\">\r\n        {/* <div id=\"search-box\"></div> */}\r\n        <div className=\"top-bar\">\r\n          \r\n        </div>\r\n        <div className=\"main-action\">\r\n          {/* <h3>Favoritos</h3> */}\r\n          {render}\r\n          {/* <MedicalRecord /> */}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\Action\\index.jsx",["87"],"import React from 'react';\r\n\r\nimport addCircle from '../../assets/images/icons/add_circle_outline_24px.svg';\r\nimport editCircle from '../../assets/images/icons/settings_24px.svg';\r\nimport minusCircle from '../../assets/images/icons/remove_circle_outline_24px.svg';\r\nimport searchCircle from '../../assets/images/icons/search_24px.svg';\r\n\r\nimport './styles.css';\r\n\r\nconst Action = ({title, type, action}) => {\r\n    let image;\r\n    switch(type) {\r\n        case 'sum':\r\n            image = addCircle;\r\n            break;\r\n        case 'edit':\r\n            image = editCircle;\r\n            break;\r\n        case 'minus': \r\n            image = minusCircle;\r\n            break;\r\n        case 'search':\r\n            image = searchCircle;\r\n            break;\r\n    }\r\n    return (\r\n        <button className=\"card\" onClick={action}>\r\n            <p className=\"card-title\">{title}</p>\r\n            <img src={image} alt={type}/>\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Action;","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\User\\index.jsx",["88"],"import React, { useEffect, useState } from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\n\r\nimport { formatCPF, formatPhone } from '../../services/mask/index';\r\n\r\nimport './styles.css';\r\n\r\nimport Button from '../Button';\r\nimport axios from 'axios';\r\n\r\nconst User = () => {\r\n    const [name, setName] = useState();\r\n    const [lastName, setLastName] = useState();\r\n    const [phoneNumber, setPhoneNumber] = useState();\r\n    const [age, setAge] = useState();\r\n    const [cpf, setCPF] = useState();\r\n    const [profession, setProfession] = useState();\r\n    const [email, setEmail] = useState();\r\n    const [accessProfile, setAccessProfile] = useState();\r\n    const [cep, setCEP] = useState();\r\n    const [street, setStreet] = useState();\r\n    const [neighborhood, setNeighborhood] = useState();\r\n    const [number, setNumber] = useState();\r\n    const [complement, setComplement] = useState();\r\n    const [city, setCity] = useState();\r\n    const [state, setState] = useState();\r\n\r\n    const [openConfirm, setOpenConfirm] = useState(false);\r\n    const [openError, setOpenError] = useState(false);\r\n\r\n    const openErrorDialog = () => {\r\n        setOpenError(true);\r\n    }\r\n\r\n    const closeErrorDialog = () => {\r\n        setOpenError(false);\r\n    }\r\n\r\n    const handleClickOpen = () => {\r\n      setOpenConfirm(true);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setOpenConfirm(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(cep && cep.length === 8) {\r\n            axios.get(`http://localhost:3010/cep/${cep}`).then(res => {\r\n                setStreet(res.data.logradouro);\r\n                setNeighborhood(res.data.bairro);\r\n                setCity(res.data.localidade);\r\n                setState(res.data.uf);\r\n            }).catch(e => {\r\n                throw \"Error ao buscar CEP\"\r\n            });\r\n        }\r\n    }, [cep]);\r\n\r\n    useEffect(() => {\r\n        if(cpf && cpf.length === 11) {\r\n            setCPF(formatCPF(cpf));\r\n        }\r\n    }, [cpf]);\r\n\r\n    useEffect(() => {\r\n        if(phoneNumber && phoneNumber.length >= 8) {\r\n            setPhoneNumber(formatPhone(phoneNumber));\r\n        }\r\n    }, [phoneNumber]);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const response = await axios.post(`http://localhost:3010/user`, {\r\n            \"name\": name,\r\n            \"lastname\": lastName,\r\n            \"phone\": phoneNumber,\r\n            \"age\": age,\r\n            \"cpf\": cpf,\r\n            \"profession\": profession,\r\n            \"email\": email,\r\n            \"accessProfile\": accessProfile,\r\n            \"address\": {\r\n                \"cep\": cep,\r\n                \"street\": street,\r\n                \"neighborhood\": neighborhood,\r\n                \"number\": number,\r\n                \"complement\": complement,\r\n                \"city\": city,\r\n                \"state\": state\r\n            }\r\n        });\r\n        \r\n        if(response.data.error) {\r\n            openErrorDialog();\r\n        } else {\r\n            handleClickOpen();\r\n        }\r\n\r\n      };\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div>\r\n                <Dialog\r\n                    open={openError}\r\n                    onClose={closeErrorDialog}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{\"Usuário já cadastrado com esse CPF\"}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\">\r\n                            Percebemos que já existe um usuário cadastrado com esse CPF no sistema! Selecione a opção de editar usuário, se deseja alterar algum dado deste CPF.\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                    <Button onSubmit={closeErrorDialog} text={\"Fechar\"} color={'#FD9797'}/>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n\r\n            <div>\r\n                <Dialog\r\n                    open={openConfirm}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{\"Usuário cadastrado com sucesso\"}</DialogTitle>\r\n                    <DialogActions>\r\n                        <Button onSubmit={handleClose} text={\"Ok\"} />\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n\r\n            <form id=\"form\" onSubmit={handleSubmit}>\r\n                <fieldset>\r\n                    <legend>Usuário</legend>\r\n                    <div className=\"all-labels\">\r\n                        <div className=\"label-row\">\r\n                            <div className=\"custom-label\">\r\n                                <label htmlFor=\"name\">Nome</label>\r\n                                <input type=\"text\" name=\"name\" required onChange={(e) => setName(e.target.value)}></input>\r\n                            </div>\r\n                            <div className=\"custom-label\">\r\n                                <label htmlFor=\"last-name\">Sobrenome</label>\r\n                                <input type=\"text\" name=\"last-name\" required style={{width: \"20rem\"}} onChange={(e) => setLastName(e.target.value)}></input>\r\n                            </div>\r\n                            <div className=\"custom-label\">\r\n                                <label htmlFor=\"age\">Idade</label>\r\n                                <input type=\"text\" name=\"age\" required onChange={(e) => setAge(e.target.value)}></input>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"label-row\">\r\n                            <div className=\"custom-label\">\r\n                                <label htmlFor=\"cpf\">CPF</label>\r\n                                <input type=\"text\" name=\"cpf\" required onChange={(e) => setCPF(e.target.value)} value={cpf}></input>\r\n                            </div>\r\n                            <div className=\"custom-label\">\r\n                                <label htmlFor=\"phone\">Telefone Principal</label>\r\n                                <input type=\"text\" name=\"phone\" required onChange={(e) => setPhoneNumber(e.target.value)} value={phoneNumber}></input>\r\n                            </div >\r\n                            <div className=\"custom-label\">\r\n                                <label htmlFor=\"email\">Email</label>\r\n                                <input type=\"text\" name=\"email\" required onChange={(e) => setEmail(e.target.value)}></input>\r\n                            </div>\r\n                            <div className=\"custom-label\">\r\n                                <label htmlFor=\"job\">Profissão</label>\r\n                                <input type=\"text\" name=\"job\" required onChange={(e) => setProfession(e.target.value)}></input>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"custom-label\">\r\n                            <label htmlFor=\"access-profile\">Perfil de Acesso</label>\r\n                            <input list=\"accessProfile\" type=\"text\" required name=\"access-profile\" onChange={ e => setAccessProfile(e.target.value)}></input>\r\n                            <datalist id=\"accessProfile\">\r\n                                <option value=\"Administrador\" />\r\n                                <option value=\"Paciente\" />\r\n                                <option value=\"Central de Cadastro\" />\r\n                                <option value=\"Médico\" />\r\n                                <option value=\"Farmácia\" />\r\n                            </datalist>\r\n                        </div>\r\n                    </div>\r\n                </fieldset>\r\n            </form>\r\n            <form id=\"form\" onSubmit={handleSubmit}>\r\n                <fieldset>\r\n                    <legend>Endereço</legend>\r\n                    <div className=\"all-labels\">\r\n                        <div className=\"label-row\">\r\n                            <div className=\"custom-label\">\r\n                                <label htmlFor=\"cep\">CEP</label>\r\n                                <input type=\"text\" name=\"cep\" required maxLength={8} onChange={(e) => setCEP(e.target.value)}></input>\r\n                            </div>\r\n                            <div className=\"custom-label\">\r\n                                <label htmlFor=\"street\">Rua</label>\r\n                                <input type=\"text\" name=\"street\" style={{width: \"20rem\"}} disabled value={street} onChange={(e) => setStreet(e.target.value)}></input>\r\n                            </div>\r\n                            <div className=\"custom-label\">\r\n                                <label htmlFor=\"neighborhood\">Bairro</label>\r\n                                <input type=\"text\" name=\"neighborhood\" disabled value={neighborhood} onChange={(e) => setNeighborhood(e.target.value)}></input>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"label-row\">\r\n                            <div className=\"custom-label\">\r\n                                <label htmlFor=\"number\">Número</label>\r\n                                <input type=\"text\" name=\"number\" onChange={(e) => setNumber(e.target.value)}></input>\r\n                            </div>\r\n                            <div className=\"custom-label\">\r\n                                <label htmlFor=\"complement\">Complemento</label>\r\n                                <input type=\"text\" name=\"complement\" onChange={(e) => setComplement(e.target.value)}></input>\r\n                            </div >\r\n                            <div className=\"custom-label\">\r\n                                <label htmlFor=\"city\">Cidade</label>\r\n                                <input type=\"text\" name=\"city\" disabled value={city} onChange={(e) => setCity(e.target.value)}></input>\r\n                            </div>\r\n                            <div className=\"custom-label\">\r\n                                <label htmlFor=\"state\">Estado</label>\r\n                                <input type=\"text\" name=\"state\" disabled value={state} onChange={(e) => setState(e.target.value)}></input>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </fieldset>\r\n\r\n            </form>\r\n            <div className=\"bottom-buttons\">\r\n                <Button  text={'Salvar'} form={\"form\"} />\r\n                {/* onSubmit={handleClickOpen} */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default User;","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\pages\\MedicalCenter\\index.jsx",[],"C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\Exam\\index.jsx",["89","90","91","92","93","94","95"],"import React, {useEffect, useState} from 'react';\r\nimport DatePicker, {registerLocale} from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport br from 'date-fns/locale/pt-BR';\r\nimport axios from 'axios';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '../Button';\r\n\r\nimport './styles.css';\r\n\r\nregisterLocale('pt-BR', br)\r\n\r\nconst Exam = ({prontuary}) => {\r\n    const [open, setOpen] = useState(false);\r\n    const [examTypes, setExamTypes] = useState([]);\r\n    const [selectedExam, setSelectedExam] = useState();\r\n    const [unitsByExam, setUnitsByExam] = useState([]);\r\n    const [selectedUnit, setSelectedUnit] = useState();\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [startTime, setStartTime] = useState(new Date());\r\n    const [availableScheduleTime, setAvailableScheduleTime] = useState([]);\r\n    const [selectedScheduleTime, setSelectedScheduleTime] = useState();\r\n    \r\n    useEffect(async () => {\r\n        const response = await axios.get(`http://localhost:3010/exam/examNames`);\r\n        let exams = response.data.map(exam => exam.name);\r\n        setExamTypes(exams);\r\n        // console.log(prontuary);\r\n    }, []);\r\n\r\n    useEffect(async () => {\r\n        if(selectedExam && selectedExam.length > 0) {\r\n            const response = await axios.get(`http://localhost:3010/exam/unitNamesByExam/${selectedExam}`);\r\n            let units = response.data;\r\n            setUnitsByExam(units);\r\n        }\r\n    }, [selectedExam]);\r\n\r\n    useEffect(async () => {\r\n        if(selectedExam && selectedUnit) {\r\n            const response = await axios.get(`http://localhost:3010/exam/availableAgenda/${selectedExam}&${selectedUnit}&${startDate.getMonth()}&${startDate.getUTCDate()}`);\r\n            if(response && response.data && response.data.length && response.data.length > 0) setAvailableScheduleTime(response.data);\r\n        }\r\n    }, [startDate]);\r\n\r\n    const handleClickOpen = () => {\r\n      setOpen(true);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setOpen(false);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n      };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"wrapper\">\r\n            <div>\r\n                <Dialog\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{\"Exame agendado com sucesso\"}</DialogTitle>\r\n                    <DialogActions>\r\n                    <Button onSubmit={handleClose} text={\"Ok\"} />\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n\r\n            <form id=\"form\" onSubmit={handleSubmit}>\r\n                <fieldset>\r\n                    <legend>Exame</legend>\r\n                    <div className=\"all-labels\">\r\n                        <div className=\"label-row\">\r\n                            <div className=\"custom-label\">\r\n                                <label htmlFor=\"exam-type\">Tipo de exame</label>\r\n                                <input list=\"exams\" type=\"text\" name=\"exam-type\" style={{width: \"20rem\"}} onChange={(e) => setSelectedExam(e.target.value)}></input>\r\n                                <datalist id=\"exams\">\r\n                                    {examTypes.map((exam, key) => <option key={key.toString()} value={exam}  />)}\r\n                                </datalist>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"label-row\">\r\n                            <div className=\"custom-label\">\r\n                                <label htmlFor=\"unity\">Unidade</label>\r\n                                <input list=\"unity\" type=\"text\" name=\"unity\" style={{width: \"20rem\"}} onChange={(e) => setSelectedUnit(e.target.value)}></input>\r\n                                <datalist id=\"unity\">\r\n                                    {unitsByExam.map((unit, key) => <option key={key.toString()} value={unit} />)}\r\n                                </datalist>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"label-row\">\r\n                            <div className=\"custom-label\">\r\n                                <label htmlFor=\"date\">Data</label>\r\n                                <DatePicker minDate={new Date()} dateFormat=\"dd/MM/yy\" locale=\"pt-BR\" selected={startDate} onChange={date => setStartDate(date)} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"label-row\">\r\n                            <div className=\"custom-label\">\r\n                                <label htmlFor=\"hour\">Horário</label>\r\n                                <input list=\"scheduleTime\" type=\"text\" name=\"scheduleTime\" onChange={ e => setSelectedScheduleTime(e.target.value)}></input>\r\n                                <datalist id=\"scheduleTime\">\r\n                                    {availableScheduleTime.map((schedule, key) => <option key={key.toString()} value={new Date(schedule).getHours() + 3 + \" hrs\"} />)}\r\n                                </datalist>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </fieldset>\r\n            </form>\r\n    \r\n            <div className=\"bottom-buttons\">\r\n                <Button  text={'Urgência'} color={'#FD9797'} form={\"form\"} onSubmit={handleClickOpen}/>\r\n                <Button  text={'Agendar'} form={\"form\"} onSubmit={handleClickOpen}/>\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Exam;","C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\services\\mask\\index.js",[],"C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\MedicalRecord\\index.jsx",[],"C:\\Users\\Caio\\Documents\\GitHub\\Sistema-Z-de-Gestao-de-Saude\\frontend-sistemaz\\src\\components\\MedicalRecord\\Record\\index.jsx",["96","97","98","99","100","101"],"import React, { useEffect, useState } from 'react';\r\n\r\nimport './styles.css'\r\n\r\nimport axios from 'axios';\r\n\r\nimport addCircle from '../../../assets/images/icons/add_circle_outline_24px.svg';\r\nimport editCircle from '../../../assets/images/icons/settings_24px.svg';\r\nimport minusCircle from '../../../assets/images/icons/remove_circle_outline_24px.svg';\r\nimport viewCircle from '../../../assets/images/icons/visibility_24px_outlined.svg';\r\nimport downloadCircle from '../../../assets/images/icons/cloud_download_24px_outlined.svg';\r\n\r\nconst Record = ({title, prontuaryNumber}) => {\r\n\r\n    const [names, setNames] = useState([]);\r\n    const [dates, setDates] = useState([]);\r\n    const [results, setResults] = useState([]);\r\n\r\n    useEffect(async () => {\r\n        switch(title) {\r\n            case 'Exames':\r\n                const response = await axios.post('http://localhost:3010/exam/examHistory',{\r\n                    prontuaryNumber: prontuaryNumber\r\n                });\r\n                \r\n                const namesOfExams = response.data.map(res => res.examType);\r\n                setNames(namesOfExams);\r\n\r\n                const datesOfExams = response.data.map(res => new Date(res.date).toLocaleDateString());\r\n                setDates(datesOfExams);\r\n\r\n                const resultsOfExams = response.data.map(res => res.examLink);\r\n                setResults(resultsOfExams);\r\n                break;\r\n            case 'Evoluções':\r\n                const response2 = await axios.post('http://localhost:3010/exam/evolutionHistory',{\r\n                    prontuaryNumber: prontuaryNumber\r\n                });\r\n                \r\n                const namesOfEvolutions = response2.data.map(res => res.description);\r\n                setNames(namesOfEvolutions);\r\n\r\n                const datesOfEvolutions = response2.data.map(res => new Date(res.date).toLocaleDateString());\r\n                setDates(datesOfEvolutions);\r\n\r\n                const resultsOfEvolutions = response2.data.map(res => res.evolutionLink);\r\n                setResults(resultsOfEvolutions);\r\n                break;\r\n        }\r\n    },[]);\r\n\r\n    return (\r\n        <div className=\"record-wrapper\">\r\n            <div className=\"record-header\">\r\n                <div>\r\n                    <p id=\"record-title\"><b>{title}</b></p>\r\n                </div>\r\n                <div className=\"record-icons\">\r\n                    <img src={addCircle} />\r\n                    <img src={minusCircle} />\r\n                    <img src={editCircle} />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"record-items\">\r\n                <div className=\"record-column\">\r\n                    <p className=\"record-item-header-title\"><b>Nome</b></p>\r\n                    {names.map((name,key) => <p className=\"record-item\" key={key.toString()} >{name}</p>)}\r\n                </div>\r\n                <div className=\"record-column\">\r\n                    <p className=\"record-item-header-title\"><b>Data</b></p>\r\n                    {dates.map((date,key) => <p className=\"record-item\" key={key.toString()} >{date}</p>)}\r\n                </div>\r\n                <div className=\"record-column\">\r\n                    <p className=\"record-item-header-title\"><b>Resultado</b></p>\r\n                    {results.map((result,key) => {\r\n                        return <>\r\n                                    <div key={key.toString()} className=\"record-actions\">\r\n                                        <a href={result} target=\"_blank\" rel=\"noopener noreferrer\"><img src={viewCircle} alt=\"\"/></a>\r\n                                        <img src={downloadCircle} alt=\"\"/>\r\n                                    </div>\r\n                                </>})}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Record;",{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":6,"column":8,"nodeType":"108","messageId":"109","endLine":6,"endColumn":21},{"ruleId":"106","severity":1,"message":"110","line":7,"column":8,"nodeType":"108","messageId":"109","endLine":7,"endColumn":25},{"ruleId":"111","severity":1,"message":"112","line":49,"column":6,"nodeType":"113","endLine":49,"endColumn":14,"suggestions":"114"},{"ruleId":"115","severity":1,"message":"116","line":57,"column":3,"nodeType":"117","messageId":"118","endLine":86,"endColumn":4},{"ruleId":"115","severity":1,"message":"116","line":12,"column":5,"nodeType":"117","messageId":"118","endLine":25,"endColumn":6},{"ruleId":"119","severity":1,"message":"120","line":59,"column":17,"nodeType":"121","messageId":"122","endLine":59,"endColumn":44},{"ruleId":"106","severity":1,"message":"123","line":23,"column":12,"nodeType":"108","messageId":"109","endLine":23,"endColumn":21},{"ruleId":"106","severity":1,"message":"124","line":23,"column":23,"nodeType":"108","messageId":"109","endLine":23,"endColumn":35},{"ruleId":"106","severity":1,"message":"125","line":25,"column":12,"nodeType":"108","messageId":"109","endLine":25,"endColumn":32},{"ruleId":"111","severity":1,"message":"126","line":27,"column":15,"nodeType":"127","endLine":32,"endColumn":6},{"ruleId":"111","severity":1,"message":"126","line":34,"column":15,"nodeType":"127","endLine":40,"endColumn":6},{"ruleId":"111","severity":1,"message":"126","line":42,"column":15,"nodeType":"127","endLine":47,"endColumn":6},{"ruleId":"111","severity":1,"message":"128","line":47,"column":8,"nodeType":"113","endLine":47,"endColumn":19,"suggestions":"129"},{"ruleId":"111","severity":1,"message":"126","line":19,"column":15,"nodeType":"127","endLine":50,"endColumn":6},{"ruleId":"115","severity":1,"message":"116","line":20,"column":9,"nodeType":"117","messageId":"118","endLine":49,"endColumn":10},{"ruleId":"111","severity":1,"message":"130","line":50,"column":7,"nodeType":"113","endLine":50,"endColumn":9,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":59,"column":21,"nodeType":"134","endLine":59,"endColumn":44},{"ruleId":"132","severity":1,"message":"133","line":60,"column":21,"nodeType":"134","endLine":60,"endColumn":46},{"ruleId":"132","severity":1,"message":"133","line":61,"column":21,"nodeType":"134","endLine":61,"endColumn":45},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"no-unused-vars","'DialogContent' is defined but never used.","Identifier","unusedVar","'DialogContentText' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'accessProfile' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["137"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'startTime' is assigned a value but never used.","'setStartTime' is assigned a value but never used.","'selectedScheduleTime' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'selectedExam' and 'selectedUnit'. Either include them or remove the dependency array.",["138"],"React Hook useEffect has missing dependencies: 'prontuaryNumber' and 'title'. Either include them or remove the dependency array.",["139"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},"Update the dependencies array to be: [accessProfile, history, logged]",{"range":"146","text":"147"},"Update the dependencies array to be: [selectedExam, selectedUnit, startDate]",{"range":"148","text":"149"},"Update the dependencies array to be: [prontuaryNumber, title]",{"range":"150","text":"151"},[1469,1477],"[accessProfile, history, logged]",[2040,2051],"[selectedExam, selectedUnit, startDate]",[2113,2115],"[prontuaryNumber, title]"]